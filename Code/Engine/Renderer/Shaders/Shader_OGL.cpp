#include "Engine/Config/BuildConfig.hpp"

#ifdef GRAPHICS_API_OGL
#include "Engine/Renderer/Shaders/Shader.hpp"
#include "Engine/Input/InputSystem.hpp"
#include "Engine/General/Core/TheMemoryManager.hpp"
#include "Engine/Renderer/Shaders/ShaderUtils.hpp"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//STRUCTORS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//---------------------------------------------------------------------------------------------------------------------------
Shader::Shader()
	: m_fileName()
	, m_type(SHADER_VERTEX)
{ }


//---------------------------------------------------------------------------------------------------------------------------
Shader::Shader(const String& fileName, eShaderType type)
	: m_fileName(fileName)
	, m_type(type)
{ }


//---------------------------------------------------------------------------------------------------------------------------
Shader::~Shader() { }


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//LOADING
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//---------------------------------------------------------------------------------------------------------------------------
void Shader::Load() {
	ShaderUtils::CreateAndLoadShader(m_shaderID, m_type, m_fileName);
}


//---------------------------------------------------------------------------------------------------------------------------
void Shader::Delete() {
	GL_CHECK(glDeleteShader(m_shaderID));
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//PRIVATE MEMBER FUNCTIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//---------------------------------------------------------------------------------------------------------------------------
int Shader::GetShaderTypeEnum() {
	if (m_type == SHADER_VERTEX) {
		return GL_VERTEX_SHADER;
	}
	else if (m_type == SHADER_FRAGMENT) {
		return GL_FRAGMENT_SHADER;
	}
	else {
		return GL_VERTEX_SHADER;
	}
}

#endif